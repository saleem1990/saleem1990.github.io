/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notification;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author owner
 */
public class Dashboard extends javax.swing.JFrame {

    public static Connection connectDB;
    private static String dbServerIp;
    private static String dbPort;
    private static String activeDatabase;

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        connectDB = custom_connect("salim7915", "info27613716", "172.16.106.1", "5432", "funsoft");
        initComponents();

        jTable1.setModel(TableModel.createTableVectors(connectDB, "select order_no,supplier, case when aie_holder_approval is true then 'approved' else 'not approved' end as user, \n"
                + "case when chief_approval is true then 'approved' else 'not approved' end as scm, \n"
                + "case when ordered is true then 'voted' else 'not voted' end as votebook, case when  fm_approval is true then 'approved' else 'not approved' end  as finance, \n"
                + "case when sad_approval is true then 'approved' else 'not approved' end as seniormanagement, \n"
                + "case when miu_approval is true then 'inspected' else 'not inspected' end as voucher_examination from st_orders where order_no ilike 'ord%' and dispatch is false"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(800, 800));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jTextField1, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("LPO Tracking", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jComboBox1.setModel(notification.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' union select distinct sso_name FROM st_authorizations order by 1"));
        jComboBox1.setBorder(javax.swing.BorderFactory.createTitledBorder("SSO Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox1, gridBagConstraints);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jTabbedPane1.addTab("Disable PRQs From SSO Dashboard", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1CaretUpdate
        // TODO add your handling code here:

        if (jTextField1.getCaretPosition() > 3) {
            jTable1.setModel(TableModel.createTableVectors(connectDB, "select order_no,supplier, case when aie_holder_approval is true then 'approved' else 'not approved' end as user, \n"
                    + "case when chief_approval is true then 'approved' else 'not approved' end as scm, \n"
                    + "case when ordered is true then 'voted' else 'not voted' end as votebook, case when  fm_approval is true then 'approved' else 'not approved' end  as finance, \n"
                    + "case when sad_approval is true then 'approved' else 'not approved' end as seniormanagement, \n"
                    + "case when miu_approval is true then 'inspected' else 'not inspected' end as voucher_examination from st_orders where order_no ilike 'ord%' and dispatch is false and order_no ilike '%" + jTextField1.getText() + "'"));
        }
    }//GEN-LAST:event_jTextField1CaretUpdate

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        String voted = jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString();

        String user = jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString();

        String scm = jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString();

        String order = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();

        if (voted.equalsIgnoreCase("voted")) {
            if (user.equalsIgnoreCase("not approved") || scm.equalsIgnoreCase("not approved")) {

                JOptionPane.showMessageDialog(this, order + " Has skipped a process");

                try {
                    PreparedStatement pst = connectDB.prepareStatement("UPDATE st_orders set ordered = false where order_no = ?");

                    pst.setObject(1, order);

                    pst.executeUpdate();

                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            }

        } else {
            if (isAlreadyVoted(order)) {

                if (scm.equalsIgnoreCase("approved")) {
                    JOptionPane.showMessageDialog(this, order + " to skip votebook because already commited");

                    //
                    try {
                        PreparedStatement pst = connectDB.prepareStatement("UPDATE st_orders set ordered = true where order_no = ?");

                        pst.setObject(1, order);

                        pst.executeUpdate();

                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }

                }
            }
        }


    }//GEN-LAST:event_jTable1MouseClicked
    public static Boolean isAlreadyVoted(String order) {
        Boolean alreadyvoted = false;
        String sql = "SELECT CASE when '" + order + "' IN (SELECT refno FROM ac_aie_commitment) THEN true else false END";

        try {
            PreparedStatement pst = connectDB.prepareStatement(sql);
            ResultSet rset = pst.executeQuery();
            while (rset.next()) {
                alreadyvoted = rset.getBoolean(1);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return alreadyvoted;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    public static java.sql.Connection custom_connect(String user, String password, String url, String port, String db) {
        Connection connection = null;

        try {

            java.lang.Class.forName("org.postgresql.Driver");

        } catch (java.lang.ClassNotFoundException cnf) {

            cnf.printStackTrace();

        }

        try {

            // if (dbServerIp == null) {
            // dbServerIp = "localhost"jj;
            dbServerIp = url;
            //}

            //   if (dbPort == null) {
            dbPort = port;
            // }

            //if (activeDatabase == null) {
            activeDatabase = db;
            //}
            //  System.out.println("jdbc:postgresql://" + this.dbServerIp + ":" + dbPort + "/" + activeDatabase + " " + userName + " " + passWord);
            connection = java.sql.DriverManager.getConnection("jdbc:postgresql://" + dbServerIp + ":" + dbPort + "/" + activeDatabase, user, password);
            System.err.print("jdbc:postgresql://" + dbServerIp + ":" + dbPort + "/" + activeDatabase);
//            if (connection != null) {
//                JOptionPane.showMessageDialog(new java.awt.Frame(), "connected");
//            }
//            else{
//                  JOptionPane.showMessageDialog(new java.awt.Frame(), "Not connected");
            System.err.println(System.getProperty("user.dir") + System.getProperty("file.separator") + "logo.jpg");
//            }
        } catch (java.sql.SQLException sqlExec) {

            //     msg = sqlExec.getMessage().toString();
            System.err.println(System.getProperty("user.dir"));

            //     Accurate = false;
            //javax.swing.JOptionPane.showMessageDialog(this, "ERROR : Logon denied due to incorrect username & password,\n network disconnection or dataserver not running!\n\nERROR DETAILS : \n[" + sqlExec.getMessage() + "]");
            sqlExec.printStackTrace();
            //   this.setVisible(true);

        }
        return connection;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
